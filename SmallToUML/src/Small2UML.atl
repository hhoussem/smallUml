-- @path smalluml=//model/smalluml.ecore
-- @path uml=/UML/model/uml.ecore

module Small2UML;
create OUT : uml from IN : smalluml;

rule NamedElement2NamedElement {
	from
		f: smalluml!NamedElement
	to
		t: uml!NamedElement (
			name  <- f.name
		)
}



rule SmallClass2Class {
	from
		f: smalluml!Class
	to
		t: uml!Class (
			name <- f.name,
			superClass <- f.parents,
			ownedOperation <- f.methods,
			attribute <- f.attributes->collect(attribute | thisModule.SmallAttribute2Attribute(attribute))
		)
}



lazy rule SmallAttribute2Attribute {
	from
		f: smalluml!Attribute
	to
		t: uml!Property (
			name <- f.name,
			type <- f.typedValue
		)
}



rule SmallMethod2Operation {
	from
		f: smalluml!Method
	to
		t: uml!Operation (
			name <- f.name,
			type <- f.returnTypedValue,
			ownedParameter <- f.parameters->collect(parameter | thisModule.SmallAttribute2Parameter(parameter))
		)
}

lazy rule SmallAttribute2Parameter {
	from
		f: smalluml!Attribute
	to
		t: uml!Parameter (
			name <- f.name,
			type <- f.typedValue
		)
}


lazy rule SmallRelationFrom2Property {
	from f : smalluml!Relation
	to t : uml!Property (
		name <- f.from.name,
		lower <- f.cardinality.lowerBound,
		upper <- f.cardinality.upperBound
	)
}

rule SmallRelation2Association {
	from f : smalluml!Relation
	to t : uml!Association (
		name <- f.name,
		memberEnd <- thisModule.SmallRelationFrom2Property(f)
	)
}



rule SmallPackage2Package {
	from
		f : smalluml!Package
	to 
		t : uml!Package (
			name <- 'Package',
			packagedElement <- f.relation.union(f.class)
		)
}


rule SmallString2PrimitiveType {
	from f : smalluml!"String"
	to t : uml!PrimitiveType (
		name <- 'String'
	)
}

rule SmallBoolean2PrimitiveType {
	from f : smalluml!"Boolean"
	to t : uml!PrimitiveType (
		name <- 'Boolean'	
	)
}

rule SmallReal2PrimitiveType {
	from f : smalluml!"Real"
	to t : uml!PrimitiveType (
		name <- 'Real'	
	)
}
rule SmallInt2PrimitiveType {
	from f : smalluml!"Integer"
	to t : uml!PrimitiveType (
		name <- 'Integer'	
	)
}

rule SmallInfinity2PrimitiveType {
	from f : smalluml!"Infinity"
	to t : uml!PrimitiveType (
		name <- 'UnlimitedNatural'	
	)
}

lazy rule SamllEnumerationValue2Property {
	from f : smalluml!Enumeration
	to t : uml!Property (
		name <- f.value
	)
}

rule SmallEnumeration2Enumeration {
	from f : smalluml!Enumeration
	to t : uml!Enumeration (
		name <- f.name,
		ownedAttribute <- f.value -> collect(value | thisModule. SamllEnumerationValue2Property(value))
	)
}



